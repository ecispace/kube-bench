---
controls:
version: 1.5
id: 1
text: "Master Node 安全配置要求"
type: "master"
groups:
  - id: 1.1
    text: "Master Node Configuration Files"
    checks:
      - id: 1.1.1
        text: "确保将API server Pod配置文件权限设置为644或更严格 (计入分数)"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c permissions=%a $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the
          master node.
          For example, chmod 644 $apiserverconf
        scored: true

      - id: 1.1.2
        text: "Ensure that the API server pod specification file ownership is set to root:root (计入分数)"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c %U:%G $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chown root:root $apiserverconf
        scored: true

      - id: 1.1.3
        text: "Ensure that the controller manager pod specification file permissions are set to 644 or more restrictive (计入分数)"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c permissions=%a $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chmod 644 $controllermanagerconf
        scored: true

      - id: 1.1.4
        text: "Ensure that the controller manager pod specification file ownership is set to root:root (计入分数)"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c %U:%G $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chown root:root $controllermanagerconf
        scored: true

      - id: 1.1.5
        text: "Ensure that the scheduler pod specification file permissions are set to 644 or more restrictive (计入分数)"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c permissions=%a $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chmod 644 $schedulerconf
        scored: true

      - id: 1.1.6
        text: "Ensure that the scheduler pod specification file ownership is set to root:root (计入分数)"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c %U:%G $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chown root:root $schedulerconf
        scored: true

      - id: 1.1.7
        text: "Ensure that the etcd pod specification file permissions are set to 644 or more restrictive (计入分数)"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c permissions=%a $etcdconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chmod 644 $etcdconf
        scored: true

      - id: 1.1.8
        text: "Ensure that the etcd pod specification file ownership is set to root:root (计入分数)"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c %U:%G $etcdconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chown root:root $etcdconf
        scored: true

      - id: 1.1.9
        text: "Ensure that the Container Network Interface file permissions are set to 644 or more restrictive (不计分数)"
        audit: "stat -c permissions=%a <path/to/cni/files>"
        type: "manual"
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chmod 644 <path/to/cni/files>
        scored: false

      - id: 1.1.10
        text: "Ensure that the Container Network Interface file ownership is set to root:root (不计分数)"
        audit: "stat -c %U:%G <path/to/cni/files>"
        type: "manual"
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chown root:root <path/to/cni/files>
        scored: false

      - id: 1.1.11
        text: "确保将etcd data文件夹权限设置为700或更严格 (计入分数)"
        audit: ps -ef | grep $etcdbin | grep -- --data-dir | sed 's%.*data-dir[= ]\([^ ]*\).*%\1%' | xargs stat -c permissions=%a
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "700"
              set: true
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
          from the below command:
          ps -ef | grep etcd
          运行以下命令（基于上面找到的etcd数据目录）。例如，
          chmod 700 /var/lib/etcd
        scored: true

      - id: 1.1.12
        text: "确保将etcd data文件夹所有权设置为etcd:etcd (计入分数)"
        audit: ps -ef | grep $etcdbin | grep -- --data-dir | sed 's%.*data-dir[= ]\([^ ]*\).*%\1%' | xargs stat -c %U:%G
        tests:
          test_items:
            - flag: "etcd:etcd"
              set: true
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
          from the below command:
          ps -ef | grep etcd
          Run the below command (based on the etcd data directory found above).
          For example, chown etcd:etcd /var/lib/etcd
        scored: true

      - id: 1.1.13
        text: "Ensure that the admin.conf file permissions are set to 644 or more restrictive (计入分数)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c permissions=%a /etc/kubernetes/admin.conf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chmod 644 /etc/kubernetes/admin.conf
        scored: true

      - id: 1.1.14
        text: "确保将admin.conf文件所有权设置为root:root (计入分数)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c %U:%G /etc/kubernetes/admin.conf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chown root:root /etc/kubernetes/admin.conf
        scored: true

      - id: 1.1.15
        text: "Ensure that the scheduler.conf file permissions are set to 644 or more restrictive (计入分数)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c permissions=%a /etc/kubernetes/scheduler.conf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chmod 644 /etc/kubernetes/scheduler.conf
        scored: true

      - id: 1.1.16
        text: "确保将scheduler.conf文件所有权设置为root:root (计入分数)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c %U:%G /etc/kubernetes/scheduler.conf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chown root:root /etc/kubernetes/scheduler.conf
        scored: true

      - id: 1.1.17
        text: "Ensure that the controller-manager.conf file permissions are set to 644 or more restrictive (计入分数)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then stat -c permissions=%a /etc/kubernetes/controller-manager.conf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "644"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chmod 644 /etc/kubernetes/controller-manager.conf
        scored: true

      - id: 1.1.18
        text: "确保将controller-manager.conf文件所有权设置为root:root (计入分数)"
        audit: "/bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then stat -c %U:%G /etc/kubernetes/controller-manager.conf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chown root:root /etc/kubernetes/controller-manager.conf
        scored: true

      - id: 1.1.19
        text: "Ensure that the Kubernetes PKI directory and file ownership is set to root:root (计入分数)"
        audit: "ls -laR /etc/kubernetes/pki/"
        type: "manual"
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chown -R root:root /etc/kubernetes/pki/
        scored: true

      - id: 1.1.20
        text: "Ensure that the Kubernetes PKI certificate file permissions are set to 644 or more restrictive (计入分数)"
        audit: "stat -c %n\ %a /etc/kubernetes/pki/*.crt"
        type: "manual"
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chmod -R 644 /etc/kubernetes/pki/*.crt
        scored: true

      - id: 1.1.21
        text: "Ensure that the Kubernetes PKI key file permissions are set to 600 (计入分数)"
        audit: "stat -c %n\ %a /etc/kubernetes/pki/*.key"
        type: "manual"
        remediation: |
          在主节点上，运行以下命令（基于系统上的文件位置）。例如
          chmod -R 600 /etc/kubernetes/pki/*.key
        scored: true

  - id: 1.2
    text: "API服务器"
    checks:
      - id: 1.2.1
        text: "确保将--anonymous-auth参数设置为false (不计分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          在主节点上编辑API服务器Pod配置文件$apiserverconf，设置以下参数 --anonymous-auth=false
        scored: false

      - id: 1.2.2
        text: "确保未设置--basic-auth-file参数 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--basic-auth-file"
              set: false
        remediation: |
          Follow the documentation and configure alternate mechanisms for authentication. Then,
          edit the API server pod specification file $apiserverconf
          on the master node and remove the --basic-auth-file=<filename> parameter.
        scored: true

      - id: 1.2.3
        text: "确保未设置--token-auth-file参数 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--token-auth-file"
              set: false
        remediation: |
          Follow the documentation and configure alternate mechanisms for authentication. Then,
          edit the API server pod specification file $apiserverconf
          on the master node and remove the --token-auth-file=<filename> parameter.
        scored: true

      - id: 1.2.4
        text: "确保将--kubelet-https参数设置为true (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--kubelet-https"
              compare:
                op: eq
                value: true
              set: true
            - flag: "--kubelet-https"
              set: false
        remediation: |
          在主节点上编辑API服务器Pod配置文件$apiserverconf，删除 --kubelet-https 参数。
        scored: true

      - id: 1.2.5
        text: "确保--kubelet-client-certificate和--kubelet-client- key参数设置为适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--kubelet-client-certificate"
              set: true
            - flag: "--kubelet-client-key"
              set: true
        remediation: |
          按照Kubernetes文档设置apiserver和kubelet之间的TLS连接。然后，在主节点上编辑API服务器Pod配置文件$apiserverconf ,设置kubelet客户端证书和关键参数，如下所示 --kubelet-client-certificate=<path/to/client-certificate-file> --kubelet-client-key=<path/to/client-key-file>
        scored: true

      - id: 1.2.6
        text: "确保--kubelet-certificate-authority参数设置为适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--kubelet-certificate-authority"
              set: true
        remediation: |
          Follow the Kubernetes documentation and setup the TLS connection between
          the apiserver and kubelets. Then, edit the API server pod specification file
          $apiserverconf on the master node and set the
          --kubelet-certificate-authority parameter to the path to the cert file for the certificate authority.
          --kubelet-certificate-authority=<ca-string>
        scored: true

      - id: 1.2.7
        text: "确保--authorization-mode参数未设置为AlwaysAllow (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: "AlwaysAllow"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --authorization-mode parameter to values other than AlwaysAllow.
          One such example could be as below.
          --authorization-mode=RBAC
        scored: true

      - id: 1.2.8
        text: "Ensure that the --authorization-mode argument includes Node (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "Node"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --authorization-mode parameter to a value that includes Node.
          --authorization-mode=Node,RBAC
        scored: true

      - id: 1.2.9
        text: "确保--authorization-mode参数包含RBAC (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "RBAC"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --authorization-mode parameter to a value that includes RBAC,
          for example:
          --authorization-mode=Node,RBAC
        scored: true

      - id: 1.2.10
        text: "确保设置了许可控制插件EventRateLimit (不计分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "EventRateLimit"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set the desired limits in a configuration file.
          Then, edit the API server pod specification file $apiserverconf
          and set the below parameters.
          --enable-admission-plugins=...,EventRateLimit,...
          --admission-control-config-file=<path/to/configuration/file>
        scored: false

      - id: 1.2.11
        text: "确保未设置许可控制插件AlwaysAdmit (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: AlwaysAdmit
              set: true
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and either remove the --enable-admission-plugins parameter, or set it to a
          value that does not include AlwaysAdmit.
        scored: true

      - id: 1.2.12
        text: "确保已设置许可控制插件AlwaysPullImages (不计分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "AlwaysPullImages"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --enable-admission-plugins parameter to include
          AlwaysPullImages.
          --enable-admission-plugins=...,AlwaysPullImages,...
        scored: false

      - id: 1.2.13
        text: "确保已设置许可控制插件SecurityContextDeny if PodSecurityPolicy is not used (不计分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "SecurityContextDeny"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --enable-admission-plugins parameter to include
          SecurityContextDeny, unless PodSecurityPolicy is already in place.
          --enable-admission-plugins=...,SecurityContextDeny,...
        scored: false

      - id: 1.2.14
        text: "确保设置了许可控制插件ServiceAccount  (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "ServiceAccount"
              set: true
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |
          Follow the documentation and create ServiceAccount objects as per your environment.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and ensure that the --disable-admission-plugins parameter is set to a
          value that does not include ServiceAccount.
        scored: true

      - id: 1.2.15
        text: "确保设置了许可控制插件NamespaceLifecycle (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "NamespaceLifecycle"
              set: true
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --disable-admission-plugins parameter to
          ensure it does not include NamespaceLifecycle.
        scored: true

      - id: 1.2.16
        text: "确保已设置许可控制插件PodSecurityPolicy (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
              set: true
        remediation: |
          Follow the documentation and create Pod Security Policy objects as per your environment.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the --enable-admission-plugins parameter to a
          value that includes PodSecurityPolicy:
          --enable-admission-plugins=...,PodSecurityPolicy,...
          Then restart the API Server.
        scored: true

      - id: 1.2.17
        text: "确保设置了许可控制插件NodeRestriction (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "NodeRestriction"
              set: true
        remediation: |
          Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the --enable-admission-plugins parameter to a
          value that includes NodeRestriction.
          --enable-admission-plugins=...,NodeRestriction,...
        scored: true

      - id: 1.2.18
        text: "确保未设置--insecure-bind-address参数 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--insecure-bind-address"
              set: false
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and remove the --insecure-bind-address parameter.
        scored: true

      - id: 1.2.19
        text: "确保将--insecure-port参数设置为0 0 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--insecure-port"
              compare:
                op: eq
                value: 0
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the below parameter.
          --insecure-port=0
        scored: true

      - id: 1.2.20
        text: "确保将--secure-port参数未设置为0 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--secure-port"
              compare:
                op: gt
                value: 0
              set: true
            - flag: "--secure-port"
              set: false
        remediation: |
          在主节点上编辑API服务器Pod配置文件$apiserverconf，删除 --secure-port 参数或将其设置为其他（非零）端口。
        scored: true

      - id: 1.2.21
        text: "确保将--profiling参数设置为false (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          在主节点上编辑API服务器Pod配置文件$apiserverconf，设置以下参数 --profiling=false
        scored: true

      - id: 1.2.22
        text: "Ensure that the --audit-log-path argument is set (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-path"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --audit-log-path parameter to a suitable path and
          file where you would like audit logs to be written, for example:
          --audit-log-path=/var/log/apiserver/audit.log
        scored: true

      - id: 1.2.23
        text: "确保--audit-log-maxage参数设置为30或适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxage"
              compare:
                op: gte
                value: 30
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --audit-log-maxage parameter to 30 or as an appropriate number of days:
          --audit-log-maxage=30
        scored: true

      - id: 1.2.24
        text: "确保--audit-log-maxbackup参数设置为10或适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxbackup"
              compare:
                op: gte
                value: 10
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --audit-log-maxbackup parameter to 10 or to an appropriate
          value.
          --audit-log-maxbackup=10
        scored: true

      - id: 1.2.25
        text: "确保--audit-log-maxsize参数设置为100或适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--audit-log-maxsize"
              compare:
                op: gte
                value: 100
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          on the master node and set the --audit-log-maxsize parameter to an appropriate size in MB.
          For example, to set it as 100 MB:
          --audit-log-maxsize=100
        scored: true

      - id: 1.2.26
        text: "确保--request-timeout参数设置为适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--request-timeout"
              set: false
            - flag: "--request-timeout"
              set: true
        remediation: |
          Edit the API server pod specification file $apiserverconf
          and set the below parameter as appropriate and if needed.
          For example,
          --request-timeout=300s
        scored: true

      - id: 1.2.27
        text: "确保--service-account-lookup参数设置为true (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--service-account-lookup"
              set: false
            - flag: "--service-account-lookup"
              compare:
                op: eq
                value: true
              set: true
        remediation: |
          在主节点上编辑API服务器Pod配置文件$apiserverconf，设置以下参数 --service-account-lookup=true
          Alternatively, you can delete the --service-account-lookup parameter from this file so
          that the default takes effect.
        scored: true

      - id: 1.2.28
        text: "确保--service-account-key-file参数设置为适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-key-file"
              set: true
        remediation: |
          在主节点上编辑API服务器Pod配置文件$apiserverconf ，将--service-account-key-file参数设置为服务帐户的公钥文件：--service-account-key文件=<文件名>
        scored: true

      - id: 1.2.29
        text: "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--etcd-certfile"
              set: true
            - flag: "--etcd-keyfile"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the etcd certificate and key file parameters.
          --etcd-certfile=<path/to/client-certificate-file>
          --etcd-keyfile=<path/to/client-key-file>
        scored: true

      - id: 1.2.30
        text: "确保正确设置--tls-cert-file和--tls-private-key-file参数 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          bin_op: and
          test_items:
            - flag: "--tls-cert-file"
              set: true
            - flag: "--tls-private-key-file"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the TLS certificate and private key file parameters.
          --tls-cert-file=<path/to/tls-certificate-file>
          --tls-private-key-file=<path/to/tls-key-file>
        scored: true

      - id: 1.2.31
        text: "确保将--client-ca-file参数设置为适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--client-ca-file"
              set: true
        remediation: |
          按照Kubernetes文档在apiserver上设置TLS连接。然后，在主节点上编辑API服务器Pod配置文件$apiserverconf ，设置客户端证书颁发机构文件。
--client-ca-file=<path/to/client-ca-file>
        scored: true

      - id: 1.2.32
        text: "确保--etcd-cafile参数设置为适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--etcd-cafile"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the etcd certificate authority file parameter.
          --etcd-cafile=<path/to/ca-file>
        scored: true

      - id: 1.2.33
        text: "Ensure that the --encryption-provider-config argument is set as appropriate (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--encryption-provider-config"
              set: true
        remediation: |
          Follow the Kubernetes documentation and configure a EncryptionConfig file.
          Then, edit the API server pod specification file $apiserverconf
          on the master node and set the --encryption-provider-config parameter to the path of that file: --encryption-provider-config=</path/to/EncryptionConfig/File>
        scored: true

      - id: 1.2.34
        text: "Ensure that encryption providers are appropriately configured (计入分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        type: "manual"
        remediation: |
          Follow the Kubernetes documentation and configure a EncryptionConfig file.
          In this file, choose aescbc, kms or secretbox as the encryption provider.
        scored: true

      - id: 1.2.35
        text: "确保API服务器仅使用强加密密码 (不计分数)"
        audit: "/bin/ps -ef | grep $apiserverbin | grep -v grep"
        tests:
          test_items:
            - flag: "--tls-cipher-suites"
              compare:
                op: has
                value: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
              set: true
        remediation: |
          在主节点上编辑API服务器Pod配置文件$apiserverconf 设置以下参数 --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM _SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM _SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM _SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
        scored: false

  - id: 1.3
    text:  "控制器管理"
    checks:
      - id: 1.3.1
        text: "确保将--terminated-pod-gc-threshold参数设置合适 (计入分数)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--terminated-pod-gc-threshold"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and set the --terminated-pod-gc-threshold to an appropriate threshold,
          for example:
          --terminated-pod-gc-threshold=10
        scored: true

      - id: 1.3.2
        text: "确保将--profiling参数设置为false (计入分数)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          在主节点上编辑Controller Manager Pod配置$controllermanagerconf ，设置以下参数
          --profiling=false
        scored: true

      - id: 1.3.3
        text: "确保将--use-service-account-credentials参数设置为true (计入分数)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--use-service-account-credentials"
              compare:
                op: noteq
                value: false
              set: true
        remediation: |
          编辑Controller Manager Pod配置文件$controllermanagerconf 在主节点上，设置以下参数
          --use-service-account-credentials=true
        scored: true

      - id: 1.3.4
        text: "确保将--service-account-private-key-file参数设置为适当的值 (计入分数)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--service-account-private-key-file"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and set the --service-account-private-key-file parameter
          to the private key file for service accounts.
          --service-account-private-key-file=<filename>
        scored: true

      - id: 1.3.5
        text: "确保正确设置--root-ca-file参数 (计入分数)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--root-ca-file"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and set the --root-ca-file parameter to the certificate bundle file`.
          --root-ca-file=<path/to/file>
        scored: true

      - id: 1.3.6
        text: "确保将RotateKubeletServerCertificate参数设置为true (计入分数)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--feature-gates"
              compare:
                op: eq
                value: "RotateKubeletServerCertificate=true"
              set: true
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.
          --feature-gates=RotateKubeletServerCertificate=true
        scored: true

      - id: 1.3.7
        text: "Ensure that the --bind-address argument is set to 127.0.0.1 (计入分数)"
        audit: "/bin/ps -ef | grep $controllermanagerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
              set: true
            - flag: "--bind-address"
              set: false
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the master node and ensure the correct value for the --bind-address parameter
        scored: true

  - id: 1.4
    text: "调度程序"
    checks:
      - id: 1.4.1
        text: "确保将--profiling参数设置为false (计入分数)"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          Edit the Scheduler pod specification file $schedulerconf file
          on the master node and set the below parameter.
          --profiling=false
        scored: true

      - id: 1.4.2
        text: "Ensure that the --bind-address argument is set to 127.0.0.1 (计入分数)"
        audit: "/bin/ps -ef | grep $schedulerbin | grep -v grep"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
              set: true
            - flag: "--bind-address"
              set: false
        remediation: |
          Edit the Scheduler pod specification file $schedulerconf
          on the master node and ensure the correct value for the --bind-address parameter
        scored: true
